#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const crypto = require('crypto');

function printUsage() {
    console.log('Usage: component_cli <component_name> <file1> [file2] [file3] ...');
    console.log('       component_cli --reset <component_name>');
    console.log('       component_cli --list');
    console.log('       component_cli --readme <component_name>');
    console.log('       component_cli --compare [--update] <component_name> [file1 file2 ...]');
    console.log('');
    console.log('Options:');
    console.log('  --with-readme    Generate a basic README.md file for the component');
    console.log('  --compare        Compare registry files to originals in a downstream repo');
    console.log('  --update         With --compare, copy new versions from repo into registry');
    console.log('');
    console.log('Examples:');
    console.log('  component_cli my-config .gitignore package.json src/main.js');
    console.log('  component_cli --with-readme my-config .gitignore package.json');
    console.log('  component_cli --reset my-config');
    console.log('  component_cli --readme my-config  # Create README.md for existing component');
    console.log('  component_cli --list');
}

function ensureDirectoryExists(dirPath) {
    if (!fs.existsSync(dirPath)) {
        fs.mkdirSync(dirPath, { recursive: true });
    }
}

function copyFileWithStructure(sourcePath, targetDir, componentName) {
    const absoluteSource = path.resolve(sourcePath);
    
    if (!fs.existsSync(absoluteSource)) {
        throw new Error(`Source file does not exist: ${sourcePath}`);
    }
    
    // Determine the target path within the component directory
    const relativePath = path.relative(process.cwd(), absoluteSource);
    const targetPath = path.join(targetDir, relativePath);
    
    // Ensure target directory exists
    ensureDirectoryExists(path.dirname(targetPath));
    
    // Copy the file
    fs.copyFileSync(absoluteSource, targetPath);
    
    return {
        sourcePath: absoluteSource,
        relativePath: relativePath,
        targetPath: `components/${componentName}/${relativePath}`,
        target: relativePath
    };
}

function detectRegistryType(info) {
    const ext = path.extname(info.targetPath).toLowerCase();
    const rel = info.targetPath.replace(/\\/g, '/');
    if (/^components\//.test(rel) && ['.js', '.jsx', '.ts', '.tsx'].includes(ext)) {
        return 'registry:component';
    }
    if (/^lib\//.test(rel) && ['.js', '.ts'].includes(ext)) {
        return 'registry:lib';
    }
    if (/^app\/.+\/page\.(js|jsx|ts|tsx)$/.test(rel)) {
        return 'registry:page';
    }
    return 'registry:file';
}

function createComponentJson(componentName, componentDir, fileInfos, description = '', options = {}) {
    const componentJson = {
        name: componentName,
        type: "registry:block",
        title: componentName.split('-').map(word => 
            word.charAt(0).toUpperCase() + word.slice(1)
        ).join(' '),
        description: description || `Component containing ${fileInfos.length} file(s)`,
        files: fileInfos.map(info => ({
            path: info.targetPath,
            type: detectRegistryType(info),
            target: info.target
        })),
        // Store original paths for reset functionality
        _metadata: {
            originalPaths: fileInfos.map(info => ({
                source: info.sourcePath,
                relative: info.relativePath
            })),
            created: new Date().toISOString()
        }
    };
    
    // Add dependencies if provided
    if (options.dependencies && options.dependencies.length > 0) {
        componentJson.dependencies = options.dependencies;
    }
    
    if (options.devDependencies && options.devDependencies.length > 0) {
        componentJson.devDependencies = options.devDependencies;
    }
    
    if (options.registryDependencies && options.registryDependencies.length > 0) {
        componentJson.registryDependencies = options.registryDependencies;
    }
    
    const componentJsonPath = path.join(componentDir, 'component.json');
    fs.writeFileSync(componentJsonPath, JSON.stringify(componentJson, null, 2));
    
    return componentJson;
}

function updateRegistryJson(componentJson, scriptDir) {
    const registryPath = path.join(scriptDir, 'registry.json');
    let registry;
    
    if (fs.existsSync(registryPath)) {
        registry = JSON.parse(fs.readFileSync(registryPath, 'utf8'));
    } else {
        registry = {
            "$schema": "https://ui.shadcn.com/schema/registry.json",
            "name": "Component Registry",
            "homepage": "",
            "items": []
        };
    }
    
    // Remove existing component if it exists
    registry.items = registry.items.filter(item => item.name !== componentJson.name);
    
    // Add the new/updated component (without metadata)
    const registryItem = { ...componentJson };
    delete registryItem._metadata;
    registry.items.push(registryItem);
    
    fs.writeFileSync(registryPath, JSON.stringify(registry, null, 2));
}

function addComponent(componentName, filePaths, scriptDir, withReadme = false) {
    console.log(`Adding component: ${componentName}`);
    
    const componentDir = path.join(scriptDir, 'components', componentName);
    ensureDirectoryExists(componentDir);
    
    const fileInfos = [];
    
    for (const filePath of filePaths) {
        try {
            console.log(`  Copying: ${filePath}`);
            const fileInfo = copyFileWithStructure(filePath, componentDir, componentName);
            fileInfos.push(fileInfo);
        } catch (error) {
            console.error(`Error copying ${filePath}: ${error.message}`);
            process.exit(1);
        }
    }
    
    // Create component.json
    const componentJson = createComponentJson(componentName, componentDir, fileInfos);
    
    // Create README.md if requested
    if (withReadme) {
        createComponentReadme(componentName, componentDir, fileInfos);
    }
    
    // Update registry.json
    updateRegistryJson(componentJson, scriptDir);
    
    console.log(`✅ Component '${componentName}' created successfully with ${fileInfos.length} file(s)`);
    console.log(`   Location: components/${componentName}/`);
}

function resetComponent(componentName, scriptDir) {
    const componentDir = path.join(scriptDir, 'components', componentName);
    const componentJsonPath = path.join(componentDir, 'component.json');
    
    if (!fs.existsSync(componentJsonPath)) {
        console.error(`Component '${componentName}' not found`);
        process.exit(1);
    }
    
    const componentJson = JSON.parse(fs.readFileSync(componentJsonPath, 'utf8'));
    
    if (!componentJson._metadata || !componentJson._metadata.originalPaths) {
        console.error(`Component '${componentName}' does not have reset metadata`);
        process.exit(1);
    }
    
    console.log(`Resetting component: ${componentName}`);
    
    for (const pathInfo of componentJson._metadata.originalPaths) {
        const targetPath = path.resolve(pathInfo.relative);
        const sourcePath = path.join(componentDir, pathInfo.relative);
        
        if (fs.existsSync(sourcePath)) {
            console.log(`  Restoring: ${pathInfo.relative}`);
            ensureDirectoryExists(path.dirname(targetPath));
            fs.copyFileSync(sourcePath, targetPath);
        } else {
            console.warn(`  Warning: Source file not found in component: ${pathInfo.relative}`);
        }
    }
    
    console.log(`✅ Component '${componentName}' files restored to original locations`);
}

function createComponentReadme(componentName, componentDir, fileInfos) {
    const readmePath = path.join(componentDir, 'README.md');
    
    const title = componentName.split('-').map(word => 
        word.charAt(0).toUpperCase() + word.slice(1)
    ).join(' ');
    
    const readmeContent = `# ${title}

A component containing ${fileInfos.length} file(s).

## Files Included

${fileInfos.map(info => `- \`${info.target}\``).join('\n')}

## Installation

\`\`\`bash
npx shadcn@latest add https://registry.thefocus.ai/r/${componentName}.json
\`\`\`

## Description

Add a description of what this component does and how to use it.

## Configuration

Describe any configuration needed after installation.

## Usage

Provide usage examples and documentation here.
`;
    
    fs.writeFileSync(readmePath, readmeContent);
    console.log(`📝 Created README.md for component '${componentName}'`);
}

function createReadmeForExisting(componentName, scriptDir) {
    const componentDir = path.join(scriptDir, 'components', componentName);
    const componentJsonPath = path.join(componentDir, 'component.json');
    
    if (!fs.existsSync(componentJsonPath)) {
        console.error(`Component '${componentName}' not found`);
        process.exit(1);
    }
    
    const componentJson = JSON.parse(fs.readFileSync(componentJsonPath, 'utf8'));
    const fileInfos = componentJson.files.map(file => ({ target: file.target }));
    
    createComponentReadme(componentName, componentDir, fileInfos);
}

function listComponents(scriptDir) {
    const componentsDir = path.join(scriptDir, 'components');
    
    if (!fs.existsSync(componentsDir)) {
        console.log('No components directory found');
        return;
    }
    
    const components = fs.readdirSync(componentsDir, { withFileTypes: true })
        .filter(dirent => dirent.isDirectory())
        .map(dirent => dirent.name);
    
    if (components.length === 0) {
        console.log('No components found');
        return;
    }
    
    console.log('Available components:');
    for (const componentName of components) {
        const componentJsonPath = path.join(componentsDir, componentName, 'component.json');
        if (fs.existsSync(componentJsonPath)) {
            const componentJson = JSON.parse(fs.readFileSync(componentJsonPath, 'utf8'));
            console.log(`  ${componentName} - ${componentJson.description} (${componentJson.files.length} files)`);
        } else {
            console.log(`  ${componentName} - (no component.json)`);
        }
    }
}

function fileHash(filePath) {
    if (!fs.existsSync(filePath)) return null;
    const data = fs.readFileSync(filePath);
    return crypto.createHash('sha256').update(data).digest('hex');
}

function compareComponent(componentName, scriptDir, doUpdate = false, fileList = null) {
    const componentDir = path.join(scriptDir, 'components', componentName);
    const componentJsonPath = path.join(componentDir, 'component.json');
    if (!fs.existsSync(componentJsonPath)) {
        console.error(`Component '${componentName}' not found`);
        process.exit(1);
    }
    const componentJson = JSON.parse(fs.readFileSync(componentJsonPath, 'utf8'));
    if (!componentJson._metadata || !componentJson._metadata.originalPaths) {
        componentJson._metadata = { originalPaths: [], created: new Date().toISOString() };
    }
    let changed = 0;
    let found = false;
    let compareList = componentJson._metadata.originalPaths;
    // If fileList is provided, filter or add them
    if (fileList && fileList.length > 0) {
        compareList = [];
        for (const file of fileList) {
            const rel = path.relative(process.cwd(), path.resolve(file));
            let entry = componentJson._metadata.originalPaths.find(f => f.relative === rel);
            if (!entry) {
                // Add new file to metadata and component.json
                entry = { source: path.resolve(file), relative: rel };
                componentJson._metadata.originalPaths.push(entry);
                // Also add to componentJson.files
                const info = {
                    sourcePath: entry.source,
                    relativePath: entry.relative,
                    targetPath: `components/${componentName}/${rel}`,
                    target: rel
                };
                componentJson.files.push({
                    path: info.targetPath,
                    type: detectRegistryType(info),
                    target: info.target
                });
                console.log(`Added new file to registry: ${rel}`);
            }
            compareList.push(entry);
        }
    }
    for (const pathInfo of compareList) {
        const registryPath = path.join(componentDir, pathInfo.relative);
        const repoPath = path.resolve(pathInfo.relative);
        const registryHash = fileHash(registryPath);
        const repoHash = fileHash(repoPath);
        if (registryHash !== repoHash) {
            changed++;
            found = true;
            console.log(`Changed: ${pathInfo.relative}`);
            if (doUpdate && repoHash) {
                ensureDirectoryExists(path.dirname(registryPath));
                fs.copyFileSync(repoPath, registryPath);
                console.log(`  Updated in registry from repo: ${pathInfo.relative}`);
            }
        } else if (fileList && fileList.length > 0) {
            found = true;
            console.log(`No change: ${pathInfo.relative}`);
        }
    }
    if (fileList && fileList.length > 0 && !found) {
        console.log(`File(s) not found in registry or repo: ${fileList.join(', ')}`);
    } else if ((!fileList || fileList.length === 0) && changed === 0) {
        console.log('All files are up to date.');
    } else if (!doUpdate && changed > 0) {
        console.log(`${changed} file(s) differ. Run with --update to copy new versions into the registry.`);
    }
    // Save changes if new file was added
    if (fileList && fileList.length > 0 && doUpdate) {
        fs.writeFileSync(componentJsonPath, JSON.stringify(componentJson, null, 2));
    }
}

function main() {
    const args = process.argv.slice(2);
    const scriptDir = path.dirname(__filename);
    
    if (args.length === 0) {
        printUsage();
        process.exit(1);
    }
    
    if (args[0] === '--help' || args[0] === '-h') {
        printUsage();
        return;
    }
    
    if (args[0] === '--list') {
        listComponents(scriptDir);
        return;
    }
    
    if (args[0] === '--reset') {
        if (args.length !== 2) {
            console.error('Reset requires exactly one component name');
            printUsage();
            process.exit(1);
        }
        resetComponent(args[1], scriptDir);
        return;
    }
    
    if (args[0] === '--readme') {
        if (args.length !== 2) {
            console.error('README creation requires exactly one component name');
            printUsage();
            process.exit(1);
        }
        createReadmeForExisting(args[1], scriptDir);
        return;
    }
    
    if (args[0] === '--compare') {
        const doUpdate = args[1] === '--update';
        const offset = doUpdate ? 2 : 1;
        if (args.length <= offset) {
            console.error('--compare requires a component name');
            printUsage();
            process.exit(1);
        }
        const componentName = args[offset];
        const fileList = args.slice(offset + 1).filter(a => !a.startsWith('--'));
        compareComponent(componentName, scriptDir, doUpdate, fileList);
        return;
    }
    
    // Check for --with-readme flag
    let withReadme = false;
    let componentName, filePaths;
    
    if (args[0] === '--with-readme') {
        if (args.length < 3) {
            console.error('--with-readme requires component name and at least one file');
            printUsage();
            process.exit(1);
        }
        withReadme = true;
        componentName = args[1];
        filePaths = args.slice(2);
    } else {
        if (args.length < 2) {
            console.error('At least component name and one file are required');
            printUsage();
            process.exit(1);
        }
        componentName = args[0];
        filePaths = args.slice(1);
    }
    
    // Validate component name
    if (!/^[a-z0-9-]+$/.test(componentName)) {
        console.error('Component name must contain only lowercase letters, numbers, and hyphens');
        process.exit(1);
    }
    
    addComponent(componentName, filePaths, scriptDir, withReadme);
}

if (require.main === module) {
    main();
}

